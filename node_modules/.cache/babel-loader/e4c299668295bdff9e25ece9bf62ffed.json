{"ast":null,"code":"var _jsxFileName = \"/Users/me/react-app/my-project/src/todo-app-list-reducer.js\",\n    _s = $RefreshSig$();\n\n//useReducer\nimport { useReducer, useRef } from \"react\"; //1.inti state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = {\n  job: \"\",\n  jobs: []\n}; //2.action\n\nconst SET_JOB = \"set_job\";\nconst ADD_JOB = \"add_job\";\nconst DELETE_JOB = \"delete_job\";\n\nconst setJob = payload => {\n  return {\n    type: SET_JOB,\n    payload: payload\n  };\n};\n\nconst addJob = payload => {\n  return {\n    type: ADD_JOB,\n    payload: payload\n  };\n};\n\nconst deleteJob = payload => {\n  return {\n    type: DELETE_JOB,\n    payload: payload\n  };\n}; //3. reducer\n\n\nconst reducer = (state, action) => {\n  console.log(\"Action: \", action);\n  console.log(\"Prev state: \", state);\n  let newState;\n\n  switch (action.type) {\n    case SET_JOB:\n      newState = { ...state,\n        job: action.payload\n      };\n      break;\n\n    case ADD_JOB:\n      newState = { ...state,\n        jobs: [...state.jobs, action.payload]\n      };\n      break;\n\n    case DELETE_JOB:\n      const newJob = [...state.jobs];\n      newJob.splice(ac);\n      newState = { ...state,\n        jobs\n      };\n      break;\n\n    default:\n      throw new Error(\"Invalid action\");\n  }\n\n  console.log(\"New state: \", newState);\n  return newState;\n}; //4.dispatch\n\n\nexport function TodoReducer() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  const {\n    job,\n    jobs\n  } = state;\n  const inputRef = useRef();\n\n  const handleSubmit = () => {\n    dispatch(addJob(job));\n    dispatch(setJob(\"\"));\n    inputRef.current.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"0 20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      value: job,\n      placeholder: \"Enter todo...\",\n      onChange: e => {\n        dispatch(setJob(e.target.value));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: jobs.map((job, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [job, /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => dispatch(deleteJob(index)),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoReducer, \"CejCuzA6VSoTBHG/kItm6zMmguM=\");\n\n_c = TodoReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoReducer\");","map":{"version":3,"sources":["/Users/me/react-app/my-project/src/todo-app-list-reducer.js"],"names":["useReducer","useRef","initState","job","jobs","SET_JOB","ADD_JOB","DELETE_JOB","setJob","payload","type","addJob","deleteJob","reducer","state","action","console","log","newState","newJob","splice","ac","Error","TodoReducer","dispatch","inputRef","handleSubmit","current","focus","padding","e","target","value","map","index"],"mappings":";;;AAAA;AACA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,OAAnC,C,CACA;;;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,GAAG,EAAE,EADW;AAEhBC,EAAAA,IAAI,EAAE;AAFU,CAAlB,C,CAIA;;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,MAAMC,MAAM,GAAIC,OAAD,IAAa;AAC1B,SAAO;AACLC,IAAAA,IAAI,EAAEL,OADD;AAELI,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAME,MAAM,GAAIF,OAAD,IAAa;AAC1B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,OADD;AAELG,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMG,SAAS,GAAIH,OAAD,IAAa;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,UADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD,C,CAMA;;;AACA,MAAMI,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,KAA5B;AAEA,MAAII,QAAJ;;AACA,UAAQH,MAAM,CAACL,IAAf;AACE,SAAKL,OAAL;AACEa,MAAAA,QAAQ,GAAG,EACT,GAAGJ,KADM;AAETX,QAAAA,GAAG,EAAEY,MAAM,CAACN;AAFH,OAAX;AAIA;;AACF,SAAKH,OAAL;AACEY,MAAAA,QAAQ,GAAG,EACT,GAAGJ,KADM;AAETV,QAAAA,IAAI,EAAE,CAAC,GAAGU,KAAK,CAACV,IAAV,EAAgBW,MAAM,CAACN,OAAvB;AAFG,OAAX;AAIA;;AACF,SAAKF,UAAL;AACI,YAAMY,MAAM,GAAG,CAAC,GAAGL,KAAK,CAACV,IAAV,CAAf;AACAe,MAAAA,MAAM,CAACC,MAAP,CAAcC,EAAd;AACAH,MAAAA,QAAQ,GAAE,EACN,GAAGJ,KADG;AAENV,QAAAA;AAFM,OAAV;AAIA;;AACJ;AACE,YAAM,IAAIkB,KAAJ,CAAU,gBAAV,CAAN;AAtBJ;;AAwBAN,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,QAA3B;AACA,SAAOA,QAAP;AACD,CA/BD,C,CAgCA;;;AAEA,OAAO,SAASK,WAAT,GAAuB;AAAA;;AAC5B,QAAM,CAACT,KAAD,EAAQU,QAAR,IAAoBxB,UAAU,CAACa,OAAD,EAAUX,SAAV,CAApC;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgBU,KAAtB;AACA,QAAMW,QAAQ,GAAGxB,MAAM,EAAvB;;AACA,QAAMyB,YAAY,GAAG,MAAM;AACzBF,IAAAA,QAAQ,CAACb,MAAM,CAACR,GAAD,CAAP,CAAR;AACAqB,IAAAA,QAAQ,CAAChB,MAAM,CAAC,EAAD,CAAP,CAAR;AACAiB,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,KAAjB;AACD,GAJD;;AAKA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,GAAG,EAAEJ,QADP;AAEE,MAAA,KAAK,EAAEtB,GAFT;AAGE,MAAA,WAAW,EAAC,eAHd;AAIE,MAAA,QAAQ,EAAG2B,CAAD,IAAO;AACfN,QAAAA,QAAQ,CAAChB,MAAM,CAACsB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP,CAAR;AACD;AANH;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE;AAAQ,MAAA,OAAO,EAAEN,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA,gBACGtB,IAAI,CAAC6B,GAAL,CAAS,CAAC9B,GAAD,EAAM+B,KAAN,kBACR;AAAA,mBACG/B,GADH,eAEE;AAAM,UAAA,OAAO,EAAE,MAAMqB,QAAQ,CAACZ,SAAS,CAACsB,KAAD,CAAV,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAASA,KAAT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA/BeX,W;;KAAAA,W","sourcesContent":["//useReducer\nimport { useReducer, useRef } from \"react\";\n//1.inti state\nconst initState = {\n  job: \"\",\n  jobs: [],\n};\n//2.action\nconst SET_JOB = \"set_job\";\nconst ADD_JOB = \"add_job\";\nconst DELETE_JOB = \"delete_job\";\n\nconst setJob = (payload) => {\n  return {\n    type: SET_JOB,\n    payload: payload,\n  };\n};\n\nconst addJob = (payload) => {\n  return {\n    type: ADD_JOB,\n    payload: payload,\n  };\n};\n\nconst deleteJob = (payload) => {\n  return {\n    type: DELETE_JOB,\n    payload: payload,\n  };\n};\n//3. reducer\nconst reducer = (state, action) => {\n  console.log(\"Action: \", action);\n  console.log(\"Prev state: \", state);\n\n  let newState;\n  switch (action.type) {\n    case SET_JOB:\n      newState = {\n        ...state,\n        job: action.payload,\n      };\n      break;\n    case ADD_JOB:\n      newState = {\n        ...state,\n        jobs: [...state.jobs, action.payload],\n      };\n      break;\n    case DELETE_JOB:\n        const newJob = [...state.jobs]\n        newJob.splice(ac)\n        newState= {\n            ...state,\n            jobs\n        }\n        break\n    default:\n      throw new Error(\"Invalid action\");\n  }\n  console.log(\"New state: \", newState);\n  return newState;\n};\n//4.dispatch\n\nexport function TodoReducer() {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const { job, jobs } = state;\n  const inputRef = useRef();\n  const handleSubmit = () => {\n    dispatch(addJob(job));\n    dispatch(setJob(\"\"));\n    inputRef.current.focus();\n  };\n  return (\n    <div style={{ padding: \"0 20px\" }}>\n      <h3>Todo List</h3>\n      <input\n        ref={inputRef}\n        value={job}\n        placeholder=\"Enter todo...\"\n        onChange={(e) => {\n          dispatch(setJob(e.target.value));\n        }}\n      />\n      <button onClick={handleSubmit}>Add</button>\n      <ul>\n        {jobs.map((job, index) => (\n          <li key={index}>\n            {job}\n            <span onClick={() => dispatch(deleteJob(index))}>&times;</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/me/react-app/my-project/src/ThemeContext.js\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\nfunction ThemeProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState(\"dark\");\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const value = {\n    theme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ThemeProvider, \"MOCvl6iGOxSkmATsuDSc6CWgskg=\");\n\n_c = ThemeProvider;\nexport { ThemeContext, ThemeProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/me/react-app/my-project/src/ThemeContext.js"],"names":["useState","createContext","ThemeContext","ThemeProvider","children","theme","setTheme","toggleTheme","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,aAAnB,QAAwC,OAAxC;;AAEA,MAAMC,YAAY,gBAAGD,aAAa,EAAlC;;AAEA,SAASE,aAAT,OAAqC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,MAAD,CAAlC;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACxBD,IAAAA,QAAQ,CAACD,KAAK,KAAK,MAAV,GAAmB,OAAnB,GAA6B,MAA9B,CAAR;AACD,GAFD;;AAIA,QAAMG,KAAK,GAAG;AACVH,IAAAA,KADU;AAEVE,IAAAA;AAFU,GAAd;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAA,cAAsCJ;AAAtC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAdQD,a;;KAAAA,a;AAeT,SAASD,YAAT,EAAuBC,aAAvB","sourcesContent":["import { useState, createContext } from \"react\";\n\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const value = {\n      theme,\n      toggleTheme\n  }\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n}\nexport { ThemeContext, ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}
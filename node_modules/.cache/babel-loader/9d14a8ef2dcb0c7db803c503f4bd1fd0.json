{"ast":null,"code":"var _jsxFileName = \"/Users/me/react-app/my-project/src/todo-app-list-reducer.js\",\n    _s = $RefreshSig$();\n\n//useReducer\nimport { useReducer } from \"react\"; //1.inti state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = {\n  job: '',\n  jobs: []\n}; //2.action\n\nconst SET_JOB = 'set_job';\nconst ADD_JOB = 'add_job';\nconst DELETE_JOB = 'delete_job';\n\nconst setJob = payload => {\n  return {\n    type: SET_JOB,\n    payload: payload\n  };\n};\n\nconst addJob = payload => {\n  return {\n    type: ADD_JOB,\n    payload: payload\n  };\n}; //3. reducer\n\n\nconst reducer = (state, action) => {\n  console.log('Action: ', action);\n  console.log('Prev state: ', state);\n  let newState;\n\n  switch (action.type) {\n    case SET_JOB:\n      newState = { ...state,\n        job: action.payload\n      };\n      break;\n\n    default:\n      throw new Error('Invalid action');\n  }\n\n  console.log('New state: ', newState);\n  return newState;\n}; //4.dispatch\n\n\nexport function TodoReducer() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  const {\n    job,\n    jobs\n  } = state;\n\n  const handleSubmit = () => {\n    dis;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '0 20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: job,\n      placeholder: \"Enter todo...\",\n      onChange: e => {\n        dispatch(setJob(e.target.value));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: jobs.map((job, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [job, \" &timer;\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoReducer, \"ivzsx5aR9qRFuEtyOcndflQiQ1Q=\");\n\n_c = TodoReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoReducer\");","map":{"version":3,"sources":["/Users/me/react-app/my-project/src/todo-app-list-reducer.js"],"names":["useReducer","initState","job","jobs","SET_JOB","ADD_JOB","DELETE_JOB","setJob","payload","type","addJob","reducer","state","action","console","log","newState","Error","TodoReducer","dispatch","handleSubmit","dis","padding","e","target","value","map","index"],"mappings":";;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B,C,CACA;;;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,GAAG,EAAE,EADS;AAEdC,EAAAA,IAAI,EAAE;AAFQ,CAAlB,C,CAIA;;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,IAAI;AACtB,SAAO;AACHC,IAAAA,IAAI,EAAEL,OADH;AAEHI,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAOA,MAAME,MAAM,GAAGF,OAAO,IAAI;AACtB,SAAO;AACHC,IAAAA,IAAI,EAAEJ,OADH;AAEHG,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD,C,CAMA;;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,KAA5B;AAEA,MAAII,QAAJ;;AACA,UAAQH,MAAM,CAACJ,IAAf;AACI,SAAKL,OAAL;AACIY,MAAAA,QAAQ,GAAE,EACN,GAAGJ,KADG;AAENV,QAAAA,GAAG,EAAEW,MAAM,CAACL;AAFN,OAAV;AAIA;;AACJ;AACI,YAAM,IAAIS,KAAJ,CAAU,gBAAV,CAAN;AARR;;AAUAH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,QAA3B;AACA,SAAOA,QAAP;AACH,CAjBD,C,CAkBA;;;AAEA,OAAO,SAASE,WAAT,GAAsB;AAAA;;AACzB,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBnB,UAAU,CAACW,OAAD,EAAUV,SAAV,CAApC;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAcS,KAApB;;AAEA,QAAMQ,YAAY,GAAG,MAAI;AACrBC,IAAAA,GAAG;AACN,GAFD;;AAGA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAZ;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AACI,MAAA,KAAK,EAAEpB,GADX;AAEI,MAAA,WAAW,EAAC,eAFhB;AAGI,MAAA,QAAQ,EAAEqB,CAAC,IAAI;AACXJ,QAAAA,QAAQ,CAACZ,MAAM,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP,CAAR;AACH;AALL;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI;AAAQ,MAAA,OAAO,EAAEL,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAUI;AAAA,gBACKjB,IAAI,CAACuB,GAAL,CAAS,CAACxB,GAAD,EAAMyB,KAAN,kBACN;AAAA,mBAAiBzB,GAAjB;AAAA,SAASyB,KAAT;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GA3BeT,W;;KAAAA,W","sourcesContent":["//useReducer\nimport { useReducer } from \"react\"\n//1.inti state\nconst initState = {\n    job: '',\n    jobs: []\n}\n//2.action\nconst SET_JOB = 'set_job'\nconst ADD_JOB = 'add_job'\nconst DELETE_JOB = 'delete_job'\n\nconst setJob = payload => {\n    return {\n        type: SET_JOB,\n        payload: payload\n    }\n}\n\nconst addJob = payload => {\n    return {\n        type: ADD_JOB,\n        payload: payload\n    }\n}\n//3. reducer\nconst reducer = (state,action) => {\n    console.log('Action: ', action)\n    console.log('Prev state: ', state)\n\n    let newState\n    switch (action.type) {\n        case SET_JOB:\n            newState ={\n                ...state,\n                job: action.payload\n            }\n            break\n        default:\n            throw new Error('Invalid action')\n    }\n    console.log('New state: ', newState)\n    return newState\n}\n//4.dispatch\n\nexport function TodoReducer(){\n    const [state, dispatch] = useReducer(reducer, initState)\n    const {job, jobs} = state\n\n    const handleSubmit = ()=>{\n        dis\n    }\n    return(\n        <div style={{padding: '0 20px'}}>\n            <h3>Todo List</h3>\n            <input \n                value={job}\n                placeholder=\"Enter todo...\"\n                onChange={e => {\n                    dispatch(setJob(e.target.value))\n                }}\n            />\n            <button onClick={handleSubmit}>Add</button>\n            <ul>\n                {jobs.map((job, index)=>(\n                    <li key={index}>{job} &timer;</li>\n                \n                ))}\n                \n            </ul>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}